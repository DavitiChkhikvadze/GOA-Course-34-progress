/**
 * Binary Search ფუნქცია დალაგებულ მასივში (Array) ელემენტის საპოვნელად.
 *
 * @param {number[]} arr - დალაგებული რიცხვების მასივი, რომელშიც ვეძებთ.
 * @param {number} target - საპოვნი მნიშვნელობა.
 * @returns {number} - ინდექსი, სადაც მოიძებნა მნიშვნელობა, ან -1 თუ ვერ მოიძებნა.
 */
function binarySearch(arr, target) {
    // საწყისი ინდექსი მასივის დასაწყისისთვის
    let left = 0;
    // საწყისი ინდექსი მასივის დასასრულისთვის
    let right = arr.length - 1;

    // ძებრის ციკლი გრძელდება მანამ, სანამ საძიებო დიაპაზონი მოქმედებს
    while (left <= right) {
        // გამოვთვალოთ შუა ინდექსი. Math.floor უზრუნველყოფს მთელ რიცხვს.
        // ოპტიმალური გზაა (left + right) / 2-ის ნაცვლად, რათა თავიდან ავიცილოთ
        // რიცხვების გადავსება (overflow) ძალიან დიდ მასივებში.
        let mid = Math.floor(left + (right - left) / 2);

        // 1. შევამოწმოთ, არის თუ არა შუა ელემენტი ჩვენი საძიებო სამიზნე
        if (arr[mid] === target) {
            // ვიპოვეთ! დავაბრუნოთ ინდექსი.
            return mid;
        }

        // 2. თუ სამიზნე (target) შუა ელემენტზე დიდია,
        // ეს ნიშნავს, რომ სამიზნე არის მასივის მარჯვენა ნახევარში.
        // ჩვენი ძებრის დიაპაზონი უნდა დავიწყოთ mid + 1-დან.
        else if (arr[mid] < target) {
            left = mid + 1;
        }

        // 3. თუ სამიზნე (target) შუა ელემენტზე მცირეა,
        // ეს ნიშნავს, რომ სამიზნე არის მასივის მარცხენა ნახევარში.
        // ჩვენი ძებრის დიაპაზონი უნდა დასრულდეს mid - 1-ზე.
        else { // arr[mid] > target
            right = mid - 1;
        }
    }

    // თუ ციკლი დასრულდა და ელემენტი ვერ მოიძებნა, დავაბრუნოთ -1.
    return -1;
}

// მაგალითის გამოყენება:
const sortedArray = [2, 5, 8, 12, 16, 23, 38, 56, 72, 91];
const targetValue = 23;

const index = binarySearch(sortedArray, targetValue);

if (index !== -1) {
    console.log(`მნიშვნელობა ${targetValue} მოიძებნა ინდექსზე: ${index}`); // შედეგი: 5
} else {
    console.log(`მნიშვნელობა ${targetValue} ვერ მოიძებნა მასივში.`);
}